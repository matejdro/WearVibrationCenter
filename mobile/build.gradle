buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.31.2'
    }
}
apply plugin: 'com.android.application'
//apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.matejdro.wearvibrationcenter"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 18
        versionName "1.2.2"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        wearAppUnbundled true
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'GradleCompatible'
    }
}

dependencies {
    implementation project(':common')
    implementation project(':wearutils')
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'com.google.android.support:wearable:2.2.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true
    }
    implementation 'de.psdev.licensesdialog:licensesdialog:1.8.0'

    // This must be here to prevent build from complaining since included library also includes
    // wearable support. Of course phone does not have wearable features.
    compileOnly 'com.google.android.wearable:wearable:2.2.0'

    implementation 'com.google.android.gms:play-services-wearable:11.8.0'
}

allprojects {
    afterEvaluate { project ->
        def keystoreProperties = rootProject.file('keystore.properties')
        def debugConfig = 'debug'

        if (keystoreProperties.exists() && android.signingConfigs.hasProperty(debugConfig)) {
            def props = new Properties()
            props.load(new FileInputStream(keystoreProperties))
            android.signingConfigs[debugConfig].storeFile = file(props['storeFile'])
            android.signingConfigs[debugConfig].storePassword = props['storePassword']
            android.signingConfigs[debugConfig].keyAlias = props['keyAlias']
            android.signingConfigs[debugConfig].keyPassword = props['keyPassword']
        }
    }
}
