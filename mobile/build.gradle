buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath libs.fabricGradle
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'toml-version-bump'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion 34
    namespace = "com.matejdro.wearvibrationcenter"
    defaultConfig {
        applicationId "com.matejdro.wearvibrationcenter"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 19
        versionName "1.3.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        wearAppUnbundled true
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'GradleCompatible'
    }
    buildFeatures {
        aidl = true
    }

    compileOptions {
        sourceCompatibility = 17
        targetCompatibility = 17
    }
}

kotlin {
    jvmToolchain(17)
}

tomlVersionBump {
    // Search for all instances of versions.json, generated by the gradle versions plugin.
    def searchTree = fileTree(rootDir)
    searchTree.include("**/build/dependencyUpdates/versions.json")
    versionReportFiles.set(searchTree)

    // Location of the toml file that we should bump versions for
    tomlFile = new File(rootDir, "libs.toml")
}

dependencies {
    implementation project(':common')
    implementation project(':wearutils')
    implementation libs.androidx.appCompat
    implementation libs.androidx.cardView
    implementation libs.androidx.percentLayout
    implementation libs.androidx.preference
    implementation libs.androidx.lifecycle.viewModel
    implementation libs.dagger.hilt.runtime
    implementation libs.kotlinova.core
    implementation libs.google.material
    implementation libs.google.wearableLibrary
    implementation libs.licensesDialog

    kapt libs.dagger.hilt.compiler

    // This must be here to prevent build from complaining since included library also includes
    // wearable support. Of course phone does not have wearable features.
    compileOnly libs.google.wearableLibrary

    implementation libs.google.playServices.wearable
}

allprojects {
    def keystoreProperties = rootProject.file('keystore.properties')
    def debugConfig = 'debug'

    if (keystoreProperties.exists() && android.signingConfigs.hasProperty(debugConfig)) {
        def props = new Properties()
        props.load(new FileInputStream(keystoreProperties))
        android.signingConfigs[debugConfig].storeFile = file(props['storeFile'])
        android.signingConfigs[debugConfig].storePassword = props['storePassword']
        android.signingConfigs[debugConfig].keyAlias = props['keyAlias']
        android.signingConfigs[debugConfig].keyPassword = props['keyPassword']
    }
}

apply plugin: 'dagger.hilt.android.plugin'
